/**
 * `sass` 配置
 *
 * @see https://sass-lang.com/documentation/js-api/interfaces/Options
 */

import type { URL } from 'node:url'
import type { AnyFn, LiteralUnion } from '../../utils'

/**
 * All of the deprecation types currently used by Sass.
 *
 * Any of these IDs or the deprecation objects they point to can be passed to
 * `fatalDeprecations`, `futureDeprecations`, or `silenceDeprecations`.
 */
export interface Deprecations {
  /**
   * Deprecation for passing a string directly to meta.call().
   *
   * This deprecation was active in the first version of Dart Sass.
   */
  'call-string': Deprecation<'call-string'>

  /**
   * Deprecation for @elseif.
   *
   * This deprecation became active in Dart Sass 1.3.2.
   */
  elseif: Deprecation<'elseif'>

  /**
   * Deprecation for @-moz-document.
   *
   * This deprecation became active in Dart Sass 1.7.2.
   */
  'moz-document': Deprecation<'moz-document'>

  /**
   * Deprecation for imports using relative canonical URLs.
   *
   * This deprecation became active in Dart Sass 1.14.2.
   */
  'relative-canonical': Deprecation<'relative-canonical'>

  /**
   * Deprecation for declaring new variables with !global.
   *
   * This deprecation became active in Dart Sass 1.17.2.
   */
  'new-global': Deprecation<'new-global'>

  /**
   * Deprecation for using color module functions in place of plain CSS functions.
   *
   * This deprecation became active in Dart Sass 1.23.0.
   */
  'color-module-compat': Deprecation<'color-module-compat'>

  /**
   * Deprecation for / operator for division.
   *
   * This deprecation became active in Dart Sass 1.33.0.
   */
  'slash-div': Deprecation<'slash-div'>

  /**
   * Deprecation for leading, trailing, and repeated combinators.
   *
   * This deprecation became active in Dart Sass 1.54.0.
   */
  'bogus-combinators': Deprecation<'bogus-combinators'>

  /**
   * Deprecation for ambiguous + and - operators.
   *
   * This deprecation became active in Dart Sass 1.55.0.
   */
  'strict-unary': Deprecation<'strict-unary'>

  /**
   * Deprecation for passing invalid units to built-in functions.
   *
   * This deprecation became active in Dart Sass 1.56.0.
   */
  'function-units': Deprecation<'function-units'>

  /**
   * Deprecation for using !default or !global multiple times for one variable.
   *
   * This deprecation became active in Dart Sass 1.62.0.
   */
  'duplicate-var-flags': Deprecation<'duplicate-var-flags'>

  /**
   * Deprecation for passing null as alpha in the JS API.
   *
   * This deprecation became active in Dart Sass 1.62.3.
   */
  'null-alpha': Deprecation<'null-alpha'>

  /**
   * Deprecation for passing percentages to the Sass abs() function.
   *
   * This deprecation became active in Dart Sass 1.65.0.
   */
  'abs-percent': Deprecation<'abs-percent'>

  /**
   * Deprecation for using the current working directory as an implicit load path.
   *
   * This deprecation became active in Dart Sass 1.73.0.
   */
  'fs-importer-cwd': Deprecation<'fs-importer-cwd'>

  /**
   * Deprecation for function and mixin names beginning with --.
   *
   * This deprecation became active in Dart Sass 1.76.0.
   */
  'css-function-mixin': Deprecation<'css-function-mixin'>

  /**
   * Deprecation for declarations after or between nested rules.
   *
   * This deprecation became active in Dart Sass 1.77.7.
   */
  'mixed-decls': Deprecation<'mixed-decls'>

  /**
   * Deprecation for meta.feature-exists
   *
   * This deprecation became active in Dart Sass 1.78.0.
   */
  'feature-exists': Deprecation<'feature-exists'>

  /**
   * Deprecation for certain uses of built-in sass:color functions.
   *
   * This deprecation became active in Dart Sass 1.79.0.
   */
  'color-4-api': Deprecation<'color-4-api'>

  /**
   * Deprecation for using global color functions instead of sass:color.
   *
   * This deprecation became active in Dart Sass 1.79.0.
   */
  'color-functions': Deprecation<'color-functions'>

  /**
   * Deprecation for legacy JS API.
   *
   * This deprecation became active in Dart Sass 1.79.0.
   */
  'legacy-js-api': Deprecation<'legacy-js-api'>

  /**
   * Deprecation for @import rules.
   *
   * This deprecation became active in Dart Sass 1.80.0.
   */
  import: Deprecation<'import'>

  /**
   * Deprecation for global built-in functions that are available in sass: modules.
   *
   * This deprecation became active in Dart Sass 1.80.0.
   */
  'global-builtin': Deprecation<'global-builtin'>

  /**
   * Deprecation for functions named "type".
   *
   * This deprecation became active in Dart Sass 1.86.0.
   */
  'type-function': Deprecation<'type-function'>

  /**
   * Deprecation for passing a relative url to compileString().
   *
   * This deprecation became active in Dart Sass 1.88.0.
   */
  'compile-string-relative-url': Deprecation<'compile-string-relative-url'>

  // END AUTOGENERATED LIST

  /**
   * Used for any user-emitted deprecation warnings.
   */
  'user-authored': Deprecation<'user-authored', 'user'>
}

/**
 * Either a deprecation or its ID, either of which can be passed to any of
 * the relevant compiler options.
 *
 * @category Messages
 * @compatibility dart: 1.85.1, node: false
 */
export type DeprecationOrId = Deprecation | keyof Deprecations

/**
 * The possible statuses that each deprecation can have.
 *
 * "active" deprecations are currently emitting deprecation warnings.
 * "future" deprecations are not yet active, but will be in the future.
 * "obsolete" deprecations were once active, but no longer are.
 *
 * The only "user" deprecation is "user-authored", which is used for deprecation
 * warnings coming from user code.
 */
export type DeprecationStatus = 'active' | 'future' | 'obsolete' | 'user'

/**
 * A deprecated feature in the language.
 */
export interface Deprecation<
  id extends keyof Deprecations = keyof Deprecations,
  status extends DeprecationStatus = DeprecationStatus,
> {
  /** The unique ID of this deprecation. */
  id: id

  /** The current status of this deprecation. */
  status: status

  /** A human-readable description of this deprecation. */
  description?: string

  /** The version this deprecation first became active in. */
  deprecatedIn: status extends 'future' | 'user' ? null : Version

  /** The version this deprecation became obsolete in. */
  obsoleteIn: status extends 'obsolete' ? Version : null
}

/**
 * A semantic version of the compiler.
 */
export declare class Version {
  /**
   * Constructs a new version.
   *
   * All components must be non-negative integers.
   *
   * @param major - The major version.
   * @param minor - The minor version.
   * @param patch - The patch version.
   */
  constructor(major: number, minor: number, patch: number)
  readonly major: number
  readonly minor: number
  readonly patch: number

  /**
   * Parses a version from a string.
   *
   * This throws an error if a valid version can't be parsed.
   *
   * @param version - A string in the form "major.minor.patch".
   */
  static parse(version: string): Version
}

type CallbackValue =
  | boolean
  | number
  | string
  | Array<boolean | number | string>
  | Record<PropertyKey, any>
type Context = {
  options: NodeSassOptions
  callback?: (result: CallbackValue) => void
  [data: string]: any
}
interface AsyncContext extends Context {
  callback: (result: CallbackValue) => void
}
interface SyncContext extends Context {
  callback: undefined
}
type ImporterReturnType =
  | Error
  | { contents: string; file?: string }
  | { file: string }
  | null
type AsyncImporter = (
  this: AsyncContext,
  url: string,
  prev: string,
  done: (data: ImporterReturnType) => void,
) => void
type SyncImporter = (
  this: SyncContext,
  url: string,
  prev: string,
) => ImporterReturnType

type SourceSpan = {
  text: string
  url: URL
  context?: string
  end: {
    column: number
    line: number
    offset: number
  }
  start: {
    column: number
    line: number
    offset: number
  }
}

export type LoggerWarnOptions = {
  span?: SourceSpan
  stack?: string
} & (
  | { deprecation: false }
  | {
      deprecation: true
      deprecationType: Deprecation
    }
)
interface SassLogger {
  /**
   * If this is `undefined`, Sass will print warnings to standard error
   */
  warn(message: string, options: {}): void

  /**
   * If this is `undefined`, Sass will print debug messages to standard error
   */
  debug(message: string, options: { span: SourceSpan }): void
}

declare const nodePackageImporterKey: unique symbol
declare class NodePackageImporter {
  private readonly [nodePackageImporterKey]: true

  constructor(entryPointDirectory?: string)
}

/**
 * Taro 配置项中 `sass` 配置
 *
 * @see https://nervjs.github.io/taro-docs/docs/config-detail/#sass
 */
export interface TaroSassOptions {
  /**
   * 需要全局注入的 `scss` 文件的绝对路径
   * 当存在 {@link projectDirectory} 配置时，才支持传入相对路径
   *
   * @see https://nervjs.github.io/taro-docs/docs/config-detail#sassresource
   */
  resource?: string | string[]

  /**
   * 项目根目录的绝对地址(若为小程序云开发模板，则应该是 `client` 目录)
   *
   * @see https://nervjs.github.io/taro-docs/docs/config-detail#sassprojectdirectory
   */
  projectDirectory?: string

  /**
   * 全局 `scss` 变量，优先级高于 `resource`
   *
   * @see https://nervjs.github.io/taro-docs/docs/config-detail#sassdata
   */
  data?: string

  [key: string]: any
}

interface CommonSassOptions {
  /**
   * Path to a file to compile
   * @description `unavailable` and will be ignored
   */
  file?: string

  /**
   * Handles when LibSass encounters the \@import directive
   *
   * @experimental
   */
  importer?: Array<AsyncImporter | SyncImporter> | AsyncImporter | SyncImporter

  /**
   * holds a collection of custom functions that may be invoked by the sass files being compiled
   *
   * @experimental
   */
  functions?: Record<string, AnyFn>

  /**
   * `true` values disable the inclusion of source map information in the output file
   *
   * @default false
   */
  omitSourceMapUrl?: boolean

  /**
   * Enables source map generation during render and renderSync
   */
  sourceMap?: boolean | string

  /**
   * `true` includes the contents in the source map information
   *
   * @default false
   */
  sourceMapContents?: boolean

  /**
   * `true` embeds the source map as a data URI
   *
   * @default false
   */
  sourceMapEmbed?: boolean

  /**
   * the value will be emitted as `sourceRoot` in the source map information
   */
  sourceMapRoot?: string
}

/**
 * `node-sass` 配置, `sass-loader` 仅支持部分配置
 *
 * @see https://www.npmjs.com/package/@types/node-sass?activeTab=code
 * @compatibility 9.0.0
 * @deprecated
 */
export interface NodeSassOptions extends CommonSassOptions {
  /**
   * A string to pass to compile
   * @description `unavailable` and will be ignored
   */
  data?: string

  /**
   * An array of paths that LibSass can look in to attempt to resolve your \@import declarations
   */
  includePaths?: string[]

  /**
   * true values enable Sass Indented Syntax for parsing the data string or file
   *
   * @default false
   */
  indentedSyntax?: boolean

  /**
   * Specify the intended location of the output file
   */
  outFile?: string | null

  /**
   * Determines the output format of the final CSS style
   *
   * @default `nested`
   */
  outputStyle?: LiteralUnion<'compact' | 'compressed' | 'expanded' | 'nested'>

  /**
   * determine whether to use space or tab character for indentation
   *
   * @default `space`
   */
  indentType?: LiteralUnion<'space' | 'tab'>

  /**
   * determine the number of spaces or tabs to be used for indentation, max is 10
   *
   * @default 2
   */
  indentWidth?: number

  /**
   * determine whether to use cr, crlf, lf or lfcr sequence for line break
   *
   * @default `lf`
   */
  linefeed?: LiteralUnion<'cf' | 'crlf' | 'if' | 'lfcr'>

  /**
   * determine how many digits after the decimal will be allowed
   *
   * @default 5
   */
  precision?: number

  /**
   * Enables the line number and file where a selector is defined to be emitted into the compiled CSS as a comment
   *
   * @default false
   */
  sourceComments?: boolean

  [key: string]: any
}

/**
 * `dart-sass` 配置, `sass-loader` 仅支持部分配置
 *
 * @see https://github.com/sass/dart-sass
 * @see https://www.npmjs.com/package/sass?activeTab=code
 * @compatibility 1.92.1
 */
export interface DartSassOptions extends CommonSassOptions {
  /**
   * A string to pass to compile
   * `unavailable` and will be ignored
   */
  data?: never

  /**
   * Paths in which to look for stylesheets loaded by rules like \@use and \@import.
   */
  loadPaths?: string[]

  /**
   * Specify the intended location of the output file
   */
  outFile?: string

  /**
   * Determines the output format of the final CSS style
   *
   * @default `expanded`
   * @deprecated use `style` instead
   */
  outputStyle?: LiteralUnion<'compressed' | 'expanded'>

  /**
   * Determines the output format of the final CSS style
   *
   * @default `expanded`
   */
  style?: LiteralUnion<'compressed' | 'expanded'>

  /**
   * By default, if the CSS document contains non-ASCII characters, Sass adds a
   * `@charset` declaration (in expanded output mode) or a byte-order mark (in
   * compressed mode) to indicate its encoding to browsers or other consumers.
   * If `charset` is `false`, these annotations are omitted
   *
   * @default true
   */
  charset?: boolean

  /**
   * If this option is set to `true`, Sass won’t print warnings that are caused
   * by dependencies
   *
   * @default false
   */
  quietDeps?: boolean

  /**
   * A set of deprecations to treat as fatal
   */
  fatalDeprecations?: (DeprecationOrId | Version)[]

  /**
   * A set of future deprecations to opt into early
   */
  futureDeprecations?: DeprecationOrId[]

  /**
   * A set of active deprecations to ignore
   */
  silenceDeprecations?: DeprecationOrId[]

  /**
   * By default, Dart Sass will print only five instances of the same
   * deprecation warning per compilation to avoid deluging users in console
   * noise. If you set `verbose` to `true`, it will instead print every
   * deprecation warning it encounters
   *
   * @default false
   */
  verbose?: boolean

  /**
   * An object to use to handle warnings and/or debug messages from Sass
   */
  logger?: SassLogger

  /**
   * If this option is set to an instance of `NodePackageImporter`, Sass will
   * use the built-in Node.js package importer to resolve Sass files with a
   * `pkg:` URL scheme.
   */
  pkgImporter?: NodePackageImporter

  /**
   * If this is true, the compiler will exclusively use ASCII characters in its error and warning  * messages. Otherwise, it may use non-ASCII Unicode characters as well.
   *
   * @default false
   */
  alertAscii?: boolean

  /**
   * If this is true, the compiler will use ANSI color escape codes in its error and warning
   * messages. If it's false, it won't use these. If it's undefined, the compiler will determine
   * whether or not to use colors depending on whether the user is using an interactive terminal.
   *
   * @default false
   */
  alertColor?: boolean

  /**
   * Whether Sass should include the sources in the generated source map.
   * This option has no effect if sourceMap is false.
   *
   * @default false
   */
  sourceMapIncludeSources?: boolean

  [key: string]: any
}
